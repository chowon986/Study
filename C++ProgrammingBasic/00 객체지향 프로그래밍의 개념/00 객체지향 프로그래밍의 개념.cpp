#include <iostream>

// 데이터와 함수를 묶어서 타입을 설계 
// (1) 사용법이 쉬워지고
// (2) 보다 안전하다.
// C에서는 데이터와 함수를 묶어서 타입 설계 불가
// 멤버 데이터(필드)
// 멤버 함수(메소드)

// 객체 지향 프로그래밍
// 객체란? 메모리에 존재하고, 이름으로 접근할 수 있는 모든 것
// int n : 변수 / primitive type instance
// Rect(class이름) r = 객체 // user define type instance

// class와 struct의 차이점
// 접근 지정자 생략시 디폴트가 다름
// (1) class : private
// (2) struct : public
// 멤버 데이터를 외부에서 직접 접근하면 -> 객체가 잘못된 상태가 될 수도 있다.
// 멤버 데이터는 외부의 잘못된 사용으로부터 보호하는 것이 안전하다.

// 접근 지정자 종류
// (1) private : 멤버 함수에서만 접근 가능
// (2) public : 모든(멤버와 멤버가 아닌) 함수에서 접근 가능
// (3) protected : 멤버 함수와 파생 클래스 멤버 함수에서 접근 가능 
// 
//

int main()
{

}

