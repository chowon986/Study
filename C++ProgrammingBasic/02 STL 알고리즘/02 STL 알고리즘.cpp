/* 02 STL 알고리즘

STL 알고리즘 : C++ 표준 라이브러리인 STL이 제공하는 함수 (정렬, 검색 등)
#include <algorithm>

특징
(1) 멤버 함수가 아닌 일반 함수(템플릿)로 제공된다.
-> 하나의 함수로 다양한 컨테이너를 사용할 수 있다.
-> 대부분의 알고리즘은 함수 인자와 반환 타입으로 반복자를 사용한다.
(컨테이너의 내부구조에 상관 없이 동일한 방법으로 요소에 접근 가능)

std::list<int> s = {1,2,3,4,5,6,7,8,9,10};
std::vector<int> v = {1,2,3,4,5,6,7,8,9,10};

std::find(begin(v), end(v), 3);
(2) 2개의 반복자와 검색할 값을 받아서 선형검색을 수행하는 알고리즘
-> 처음은 검색 대상에 포함되지만, 마지막은 검색 대상에 포함되지 않는다.
-> [fitst, last)라고 표기
-> 검색 결과가 없으면 last 값이 나온다

조건자 : bool을 반환하는 함수, 함수 객체, 람다 표현식
_if로 끝나는 알고리즘에 전달되어서 정책으로 사용된다.

v 안에서 처음 나오는 3의 배수를 구해 보세요
bool foo(int n)
{
return n%3 == 0;
}

auto p = std::find_if(begin(v), end(v), foo);
std::cout<<*p<<std::endl; // 9

<같은 내용을 람다식으로>
auto p = std::find_if(begin(v), end(v), [](int n){return n%3 == 0;});
std::cout<<*p<<std::endl; // 9

--------------------------------------------------
replace(begin(v), end(v), 10, 0);
시작부터 끝까지 10이 있으면 0으로 바꿔라
replace(begin(v), end(v), [](int n){return n>=10;}, 0);
시작부터 끝까지 함수가 true면 0으로 바꿔라
-------------------------------------------------
int sum = accumulate(begin(v), end(v), 0);
처음부터 끝까지 더하는데 sum의 초기값은 0으로해라
-> 이건 numeric이라는 헤더에 들어있음
(수학적인 계산이 보통 여기 있음)
-------------------------------------------------
vector의 모든 요소를 내림차순 정렬
sort(begin(v), end(v)); -> 오름차순 정렬
sort(begin(v), end(v), [](int a, int b){return a>b;); -> 내림차순 정렬
------------------------------------------------
모든 요소를 채우는 알고리즘
fill(begin(v), end(v), 1);
처음부터 끝까지 모든 요소를 1로 채워라
------------------------------------------------
STL의 알고리즘에 대해 알고 싶으면
cppreference.com 첫번째 화면 내 Algorithm Library 참고



*/